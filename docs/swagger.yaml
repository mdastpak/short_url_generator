basePath: /
definitions:
  handler.AdminStats:
    properties:
      activeURLs:
        type: integer
      cacheEnabled:
        type: boolean
      cacheHitRate:
        type: number
      clicksToday:
        type: integer
      expiredURLs:
        type: integer
      lastUpdated:
        type: string
      totalClicks:
        type: integer
      totalURLs:
        type: integer
      urlsCreatedToday:
        type: integer
    type: object
  handler.IPBlockCount:
    properties:
      count:
        type: integer
      ip:
        type: string
    type: object
  handler.ReasonCount:
    properties:
      count:
        type: integer
      reason:
        type: string
    type: object
  handler.SecurityStats:
    properties:
      botDetectionEnabled:
        type: boolean
      botDetections:
        type: integer
      last24Hours:
        $ref: '#/definitions/handler.StatsLast24Hours'
      lastUpdated:
        type: string
      maliciousURLsBlocked:
        type: integer
      rateLimitViolations:
        type: integer
      securityEnabled:
        type: boolean
      topBlockReasons:
        items:
          $ref: '#/definitions/handler.ReasonCount'
        type: array
      topBlockedIPs:
        items:
          $ref: '#/definitions/handler.IPBlockCount'
        type: array
      totalSecurityBlocks:
        type: integer
      urlScanningEnabled:
        type: boolean
    type: object
  handler.StatsLast24Hours:
    properties:
      botDetections:
        type: integer
      maliciousURLsBlocked:
        type: integer
      rateLimitViolations:
        type: integer
    type: object
  handler.URLDetailResponse:
    properties:
      accessLogs:
        items:
          $ref: '#/definitions/model.URLLog'
        type: array
      totalLogs:
        type: integer
      url:
        $ref: '#/definitions/model.URL'
    type: object
  handler.URLListItem:
    properties:
      createdAt:
        type: string
      currentUsage:
        type: integer
      expiry:
        type: string
      isActive:
        type: boolean
      isExpired:
        type: boolean
      managementID:
        type: string
      maxUsage:
        type: integer
      originalURL:
        type: string
      shortURL:
        type: string
    type: object
  handler.URLListResponse:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
      urls:
        items:
          $ref: '#/definitions/handler.URLListItem'
        type: array
    type: object
  model.ActivityLog:
    properties:
      action:
        description: Type of action (see ActivityType constants)
        type: string
      details:
        additionalProperties: true
        description: Additional action-specific details
        type: object
      ip:
        description: IP address of the user
        type: string
      location:
        description: 'Optional: City, Country (from GeoIP)'
        type: string
      timestamp:
        description: When the action occurred
        type: string
      userAgent:
        description: Browser/device user agent
        type: string
    type: object
  model.CacheMetricsResponse:
    description: Cache performance metrics including hit rate and evictions
    properties:
      enabled:
        example: true
        type: boolean
      evictions:
        example: 12
        type: integer
      hitRatio:
        example: 0.957
        type: number
      hits:
        example: 1234
        type: integer
      keysAdded:
        example: 1290
        type: integer
      misses:
        example: 56
        type: integer
    type: object
  model.ChangePasswordRequest:
    properties:
      currentPassword:
        example: OldPassword123
        type: string
      newPassword:
        example: NewPassword123
        type: string
    type: object
  model.CreateRequest:
    description: Request body for creating a new short URL. Expiry time must be in
      RFC3339 format with timezone (e.g., 2024-12-31T23:59:59+03:30 for Iran time,
      or use Z for UTC)
    properties:
      customSlug:
        example: my-link
        type: string
      expiry:
        example: "2024-12-31T23:59:59+03:30"
        type: string
      maxUsage:
        example: 100
        type: integer
      originalURL:
        example: https://example.com
        type: string
    required:
    - originalURL
    type: object
  model.CreateResponse:
    description: Response after successfully creating a short URL
    properties:
      createdAt:
        example: "2024-01-15T10:30:00+03:30"
        type: string
      expiry:
        example: "2024-12-31T23:59:59+03:30"
        type: string
      fullURL:
        example: http://localhost:8080/abc123xy
        type: string
      managementID:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      maxUsage:
        example: 100
        type: integer
      originalURL:
        example: https://example.com
        type: string
      qrCodeURL:
        example: http://localhost:8080/qr/abc123xy
        type: string
      shortURL:
        example: abc123xy
        type: string
    type: object
  model.DeleteRequest:
    description: Request body for deleting a short URL
    properties:
      originalURL:
        example: https://example.com
        type: string
      shortURL:
        example: abc123xy
        type: string
    required:
    - originalURL
    - shortURL
    type: object
  model.ErrorResponse:
    description: Standard error response
    properties:
      error:
        example: Invalid URL format
        type: string
    type: object
  model.ForgotPasswordRequest:
    properties:
      email:
        example: user@example.com
        type: string
    type: object
  model.HealthResponse:
    description: Health check response showing service status
    properties:
      redis:
        example: connected
        type: string
      status:
        example: ok
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: SecurePassword123
        type: string
    type: object
  model.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: SecurePassword123
        type: string
    type: object
  model.ResetPasswordRequest:
    properties:
      newPassword:
        example: NewSecurePassword123
        type: string
      token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  model.SetPasswordRequest:
    properties:
      password:
        example: MySecurePassword123
        type: string
    type: object
  model.SetSecurityPhraseRequest:
    properties:
      securityPhrase:
        example: Purple Elephant 2025
        type: string
    type: object
  model.SlugConflictResponse:
    description: Response when requested custom slug is already in use
    properties:
      error:
        example: Custom slug already exists
        type: string
      suggestions:
        items:
          $ref: '#/definitions/model.SlugSuggestion'
        type: array
    type: object
  model.SlugSuggestion:
    description: Suggested alternative slug when requested slug is taken
    properties:
      available:
        example: true
        type: boolean
      slug:
        example: my-link-2
        type: string
    type: object
  model.TimeSeriesPoint:
    properties:
      date:
        description: Date in "YYYY-MM-DD" format
        type: string
      value:
        description: Number of clicks on this date
        type: integer
    type: object
  model.URL:
    properties:
      active:
        description: Manual activation status (for scheduled URLs)
        type: boolean
      aliases:
        description: Additional short codes pointing to same URL
        items:
          type: string
        type: array
      createdAt:
        type: string
      currentUsage:
        type: integer
      customDomain:
        description: Optional custom domain (e.g., "go.company.com")
        type: string
      expiry:
        type: string
      managementID:
        description: UUID v4 for update/delete operations
        type: string
      maxUsage:
        type: integer
      originalURL:
        type: string
      passwordHash:
        description: Bcrypt hash for password-protected URLs (empty if not protected)
        type: string
      scheduledEnd:
        description: URL becomes inactive at this time (zero value = no end)
        type: string
      scheduledStart:
        description: URL becomes active at this time (zero value = active immediately)
        type: string
      shortURL:
        type: string
      userID:
        description: Owner user ID (empty for anonymous URLs)
        type: string
    type: object
  model.URLLog:
    properties:
      accessedAt:
        type: string
      ip:
        type: string
      referer:
        type: string
      shortURL:
        type: string
      userAgent:
        type: string
    type: object
  model.URLStats:
    properties:
      clicks:
        description: Total number of clicks
        type: integer
      lastAccessed:
        description: Last access timestamp (ISO 8601)
        type: string
      originalURL:
        description: Original destination URL
        type: string
      shortURL:
        description: Short URL identifier
        type: string
    type: object
  model.UpdateRequest:
    description: Request body for updating the destination of a short URL
    properties:
      newOriginalURL:
        example: https://newexample.com
        type: string
      originalURL:
        example: https://example.com
        type: string
      shortURL:
        example: abc123xy
        type: string
    required:
    - newOriginalURL
    - originalURL
    - shortURL
    type: object
  model.UpdateResponse:
    description: Response after successfully updating a short URL
    properties:
      managementID:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      message:
        example: URL updated successfully
        type: string
      newOriginalURL:
        example: https://newexample.com
        type: string
      oldOriginalURL:
        example: https://example.com
        type: string
      shortURL:
        example: abc123xy
        type: string
      updatedAt:
        example: "2024-01-15T11:00:00+03:30"
        type: string
    type: object
  model.UserAnalytics:
    properties:
      activeUrls:
        description: Number of active URLs
        type: integer
      browserBreakdown:
        additionalProperties:
          type: integer
        description: Clicks by browser
        type: object
      clicksByDay:
        description: Time-series data for clicks
        items:
          $ref: '#/definitions/model.TimeSeriesPoint'
        type: array
      deviceBreakdown:
        additionalProperties:
          type: integer
        description: Clicks by device type (mobile/desktop/tablet)
        type: object
      recentActivity:
        description: Recent user activities
        items:
          $ref: '#/definitions/model.ActivityLog'
        type: array
      topUrls:
        description: Top performing URLs by clicks
        items:
          $ref: '#/definitions/model.URLStats'
        type: array
      totalClicks:
        description: Total clicks across all URLs
        type: integer
      totalUrls:
        description: Total number of URLs created
        type: integer
    type: object
  model.UserResponse:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      customDomain:
        type: string
      email:
        type: string
      id:
        type: string
      lastLoginAt:
        type: string
      securityPhrase:
        description: User's security phrase (safe to expose)
        type: string
      verified:
        type: boolean
    type: object
  model.VerifyOTPRequest:
    properties:
      email:
        example: user@example.com
        type: string
      otp:
        example: "123456"
        type: string
    type: object
  model.VerifyPasswordRequest:
    properties:
      password:
        example: MySecurePassword123
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/yourusername/short-url-generator/issues
  description: Production-ready URL shortening service with Redis persistence, caching,
    rate limiting, and comprehensive management features.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/yourusername/short-url-generator
  title: Short URL Generator API
  version: "2.0"
paths:
  /{shortURL}:
    get:
      description: Redirects to the original URL associated with the short URL. Increments
        usage counter and logs access. Add ?preview=1 to show preview page instead.
      parameters:
      - description: Short URL code
        example: '"abc123xy"'
        in: path
        name: shortURL
        required: true
        type: string
      - default: 0
        description: Show preview page (1=yes, 0=no)
        in: query
        name: preview
        type: integer
      produces:
      - application/json
      responses:
        "301":
          description: Redirect to original URL
        "302":
          description: Redirect to preview page (if preview=1)
        "403":
          description: Usage limit exceeded
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "410":
          description: URL has expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Redirect to original URL
      tags:
      - URLs
  /admin/dashboard:
    get:
      description: Returns the admin dashboard HTML interface
      produces:
      - text/html
      responses:
        "200":
          description: Admin dashboard HTML
          schema:
            type: string
      summary: Serve admin dashboard UI
      tags:
      - Admin
  /admin/security/stats:
    get:
      description: Returns comprehensive security statistics including bot detections,
        blocked URLs, and rate limit violations
      produces:
      - application/json
      responses:
        "200":
          description: Security statistics
          schema:
            $ref: '#/definitions/handler.SecurityStats'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get security statistics
      tags:
      - Admin
  /admin/stats:
    get:
      description: Returns comprehensive system statistics including URL counts, clicks,
        and cache metrics
      produces:
      - application/json
      responses:
        "200":
          description: System statistics
          schema:
            $ref: '#/definitions/handler.AdminStats'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get system statistics
      tags:
      - Admin
  /admin/system/health:
    get:
      description: Returns detailed system health including Redis metrics, cache stats,
        and memory usage
      produces:
      - application/json
      responses:
        "200":
          description: System health details
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get extended system health
      tags:
      - Admin
  /admin/urls:
    get:
      description: Returns paginated list of all URLs with filtering and search capabilities
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page (max 100)
        in: query
        name: pageSize
        type: integer
      - description: Search in originalURL or shortURL
        in: query
        name: search
        type: string
      - default: all
        description: 'Filter by status: active, expired, all'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: URL list
          schema:
            $ref: '#/definitions/handler.URLListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all URLs with pagination
      tags:
      - Admin
  /admin/urls/{shortURL}:
    get:
      description: Returns detailed information about a specific URL including access
        logs
      parameters:
      - description: Short URL code
        in: path
        name: shortURL
        required: true
        type: string
      - default: 50
        description: Number of recent logs to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: URL details
          schema:
            $ref: '#/definitions/handler.URLDetailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get detailed URL information
      tags:
      - Admin
  /admin/urls/bulk-delete:
    post:
      consumes:
      - application/json
      description: Deletes multiple URLs at once
      parameters:
      - description: Array of short URL codes to delete
        in: body
        name: request
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Deletion result with counts
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Bulk delete URLs
      tags:
      - Admin
  /api/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset magic link to email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset link sent message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Request password reset
      tags:
      - Authentication
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password, returns access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with tokens
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Email not verified or account inactive
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login
      tags:
      - Authentication
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register with email and password, sends OTP for verification
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /api/auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resend verification code to email
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Resend OTP code
      tags:
      - Authentication
  /api/auth/reset-password:
    get:
      description: Check if reset token is valid and not expired
      parameters:
      - description: Reset token (UUID)
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token valid
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid token format
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Token not found or expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "410":
          description: Token already used
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Validate password reset token
      tags:
      - Authentication
    post:
      consumes:
      - application/json
      description: Reset user password using reset token from email
      parameters:
      - description: Reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or weak password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Token not found or expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "410":
          description: Token already used
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Reset password with token
      tags:
      - Authentication
  /api/auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify email with OTP code sent during registration
      parameters:
      - description: OTP verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verification success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or OTP
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: OTP not found or expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Verify OTP code
      tags:
      - Authentication
  /api/user/analytics:
    get:
      description: Get comprehensive analytics for authenticated user including click
        trends, device breakdown, and top URLs
      produces:
      - application/json
      responses:
        "200":
          description: User analytics data
          schema:
            $ref: '#/definitions/model.UserAnalytics'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user analytics
      tags:
      - User
  /api/user/change-password:
    post:
      consumes:
      - application/json
      description: Change user password (requires current password)
      parameters:
      - description: Current and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or weak password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Invalid current password or not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - User
  /api/user/profile:
    get:
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/model.UserResponse'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
  /api/user/security-phrase:
    put:
      consumes:
      - application/json
      description: Set or update user's security phrase for email verification
      parameters:
      - description: Security phrase (3-50 characters)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SetSecurityPhraseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Security phrase updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid phrase
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set security phrase
      tags:
      - User
  /api/user/url/{shortURL}/logs:
    get:
      description: Get detailed access logs for a specific short URL
      parameters:
      - description: Short URL
        in: path
        name: shortURL
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access logs
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: URL does not belong to user
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get URL access logs
      tags:
      - User
  /api/user/url/{shortURL}/password:
    delete:
      description: Remove password protection from a short URL (authenticated users
        only)
      parameters:
      - description: Short URL
        in: path
        name: shortURL
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password removed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove URL password
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Set or update password protection for a short URL (authenticated
        users only)
      parameters:
      - description: Short URL
        in: path
        name: shortURL
        required: true
        type: string
      - description: Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password set successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set or update URL password
      tags:
      - User
  /api/user/urls:
    get:
      description: Retrieve all short URLs created by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of user's URLs
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all URLs for authenticated user
      tags:
      - User
  /cache/metrics:
    get:
      description: Returns cache performance metrics including hit rate, misses, and
        evictions
      produces:
      - application/json
      responses:
        "200":
          description: Cache metrics
          schema:
            $ref: '#/definitions/model.CacheMetricsResponse'
        "503":
          description: Cache is disabled
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Cache performance metrics
      tags:
      - System
  /health:
    get:
      description: Returns service health status and Redis connectivity
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/model.HealthResponse'
        "503":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/model.HealthResponse'
      summary: Health check
      tags:
      - System
  /password/{shortURL}:
    get:
      description: Display password prompt page for password-protected URLs
      parameters:
      - description: Short URL
        in: path
        name: shortURL
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: HTML password prompt page
          schema:
            type: string
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Show password prompt page
      tags:
      - URLs
  /preview/{shortURL}:
    get:
      description: Displays a preview page showing the destination URL before redirecting
        (anti-phishing protection)
      parameters:
      - description: Short URL code
        example: '"abc123xy"'
        in: path
        name: shortURL
        required: true
        type: string
      - default: 0
        description: Auto-redirect countdown in seconds (0 to disable)
        in: query
        name: autoredirect
        type: integer
      produces:
      - text/html
      responses:
        "200":
          description: Preview page HTML
          schema:
            type: string
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "410":
          description: URL has expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Show URL preview page
      tags:
      - URLs
  /qr/{shortURL}:
    get:
      description: Generates a QR code image (PNG) for the short URL with customizable
        size and error correction level
      parameters:
      - description: Short URL code
        example: '"abc123xy"'
        in: path
        name: shortURL
        required: true
        type: string
      - default: 256
        description: QR code size in pixels (128-1024)
        example: 512
        in: query
        name: size
        type: integer
      - default: medium
        description: 'Error correction level: low, medium, high, highest'
        enum:
        - low
        - medium
        - high
        - highest
        example: high
        in: query
        name: level
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Invalid size or level parameter
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Short URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Failed to generate QR code
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Generate QR code
      tags:
      - URLs
  /shorten:
    post:
      consumes:
      - application/json
      description: Shortens a URL with optional expiry time, usage limits, and custom
        slug. Expiry must be in RFC3339 format with timezone (e.g., 2024-12-31T23:59:59+03:30
        for Iran time, or Z for UTC). Supports URL deduplication.
      parameters:
      - description: URL shortening request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returned existing short URL (deduplication)
          schema:
            $ref: '#/definitions/model.CreateResponse'
        "201":
          description: Successfully created short URL
          schema:
            $ref: '#/definitions/model.CreateResponse'
        "400":
          description: Invalid request (bad URL, invalid expiry, etc.)
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Custom slug already taken (includes suggestions)
          schema:
            $ref: '#/definitions/model.SlugConflictResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a short URL
      tags:
      - URLs
  /shorten/{managementID}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a short URL. Requires managementID (from creation),
        shortURL, and original URL for 3-factor validation.
      parameters:
      - description: Management ID (UUID from creation response)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: managementID
        required: true
        type: string
      - description: Delete request with validation credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.DeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: URL deleted successfully (no content)
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Validation failed (mismatched credentials)
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Management ID or short URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete a short URL
      tags:
      - Management
    put:
      consumes:
      - application/json
      description: Updates the destination URL of a short URL. Requires managementID
        (from creation), shortURL, and original URL for multi-factor validation.
      parameters:
      - description: Management ID (UUID from creation response)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: managementID
        required: true
        type: string
      - description: Update request with validation credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: URL updated successfully
          schema:
            $ref: '#/definitions/model.UpdateResponse'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Validation failed (mismatched credentials)
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Management ID or short URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "410":
          description: URL has expired
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update URL destination
      tags:
      - Management
  /verify-password/{shortURL}:
    post:
      consumes:
      - application/json
      description: Verify password for password-protected short URL and set session
        cookie
      parameters:
      - description: Short URL
        in: path
        name: shortURL
        required: true
        type: string
      - description: Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.VerifyPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password verified, redirect URL provided
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Invalid password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: URL not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "429":
          description: Too many attempts
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Verify password for protected URL
      tags:
      - URLs
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: Admin API key for accessing protected endpoints
    in: header
    name: X-Admin-Key
    type: apiKey
swagger: "2.0"
tags:
- description: Operations for creating, redirecting, and managing short URLs
  name: URLs
- description: Secure operations for updating and deleting short URLs (requires managementID)
  name: Management
- description: Health checks and system metrics
  name: System
- description: Admin dashboard and management endpoints (requires API key authentication)
  name: Admin
- description: User registration, login, and OTP verification
  name: Authentication
