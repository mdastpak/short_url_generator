// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/yourusername/short-url-generator",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/yourusername/short-url-generator/issues",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/dashboard": {
            "get": {
                "description": "Returns the admin dashboard HTML interface",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Serve admin dashboard UI",
                "responses": {
                    "200": {
                        "description": "Admin dashboard HTML",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/security/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns comprehensive security statistics including bot detections, blocked URLs, and rate limit violations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get security statistics",
                "responses": {
                    "200": {
                        "description": "Security statistics",
                        "schema": {
                            "$ref": "#/definitions/handler.SecurityStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns comprehensive system statistics including URL counts, clicks, and cache metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get system statistics",
                "responses": {
                    "200": {
                        "description": "System statistics",
                        "schema": {
                            "$ref": "#/definitions/handler.AdminStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/system/health": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns detailed system health including Redis metrics, cache stats, and memory usage",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get extended system health",
                "responses": {
                    "200": {
                        "description": "System health details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/urls": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns paginated list of all URLs with filtering and search capabilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "List all URLs with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page (max 100)",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in originalURL or shortURL",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "all",
                        "description": "Filter by status: active, expired, all",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL list",
                        "schema": {
                            "$ref": "#/definitions/handler.URLListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/urls/bulk-delete": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes multiple URLs at once",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Bulk delete URLs",
                "parameters": [
                    {
                        "description": "Array of short URL codes to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion result with counts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/urls/{shortURL}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific URL including access logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get detailed URL information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short URL code",
                        "name": "shortURL",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of recent logs to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL details",
                        "schema": {
                            "$ref": "#/definitions/handler.URLDetailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Login with email and password, returns access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with tokens",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Email not verified or account inactive",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Get a new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register with email and password, sends OTP for verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/resend-otp": {
            "post": {
                "description": "Resend verification code to email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend OTP code",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/verify-otp": {
            "post": {
                "description": "Verify email with OTP code sent during registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP code",
                "parameters": [
                    {
                        "description": "OTP verification data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or OTP",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "OTP not found or expired",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cache/metrics": {
            "get": {
                "description": "Returns cache performance metrics including hit rate, misses, and evictions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Cache performance metrics",
                "responses": {
                    "200": {
                        "description": "Cache metrics",
                        "schema": {
                            "$ref": "#/definitions/model.CacheMetricsResponse"
                        }
                    },
                    "503": {
                        "description": "Cache is disabled",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns service health status and Redis connectivity",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/model.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/model.HealthResponse"
                        }
                    }
                }
            }
        },
        "/preview/{shortURL}": {
            "get": {
                "description": "Displays a preview page showing the destination URL before redirecting (anti-phishing protection)",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "URLs"
                ],
                "summary": "Show URL preview page",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"abc123xy\"",
                        "description": "Short URL code",
                        "name": "shortURL",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Auto-redirect countdown in seconds (0 to disable)",
                        "name": "autoredirect",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preview page HTML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "URL has expired",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr/{shortURL}": {
            "get": {
                "description": "Generates a QR code image (PNG) for the short URL with customizable size and error correction level",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "URLs"
                ],
                "summary": "Generate QR code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"abc123xy\"",
                        "description": "Short URL code",
                        "name": "shortURL",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 256,
                        "example": 512,
                        "description": "QR code size in pixels (128-1024)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "highest"
                        ],
                        "type": "string",
                        "default": "medium",
                        "example": "high",
                        "description": "Error correction level: low, medium, high, highest",
                        "name": "level",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid size or level parameter",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate QR code",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shorten": {
            "post": {
                "description": "Shortens a URL with optional expiry time, usage limits, and custom slug. Expiry must be in RFC3339 format with timezone (e.g., 2024-12-31T23:59:59+03:30 for Iran time, or Z for UTC). Supports URL deduplication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "URLs"
                ],
                "summary": "Create a short URL",
                "parameters": [
                    {
                        "description": "URL shortening request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned existing short URL (deduplication)",
                        "schema": {
                            "$ref": "#/definitions/model.CreateResponse"
                        }
                    },
                    "201": {
                        "description": "Successfully created short URL",
                        "schema": {
                            "$ref": "#/definitions/model.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request (bad URL, invalid expiry, etc.)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Custom slug already taken (includes suggestions)",
                        "schema": {
                            "$ref": "#/definitions/model.SlugConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shorten/{managementID}": {
            "put": {
                "description": "Updates the destination URL of a short URL. Requires managementID (from creation), shortURL, and original URL for multi-factor validation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Management"
                ],
                "summary": "Update URL destination",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Management ID (UUID from creation response)",
                        "name": "managementID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request with validation credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL updated successfully",
                        "schema": {
                            "$ref": "#/definitions/model.UpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Validation failed (mismatched credentials)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Management ID or short URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "URL has expired",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently deletes a short URL. Requires managementID (from creation), shortURL, and original URL for 3-factor validation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Management"
                ],
                "summary": "Delete a short URL",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Management ID (UUID from creation response)",
                        "name": "managementID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete request with validation credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "URL deleted successfully (no content)"
                    },
                    "400": {
                        "description": "Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Validation failed (mismatched credentials)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Management ID or short URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{shortURL}": {
            "get": {
                "description": "Redirects to the original URL associated with the short URL. Increments usage counter and logs access. Add ?preview=1 to show preview page instead.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "URLs"
                ],
                "summary": "Redirect to original URL",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"abc123xy\"",
                        "description": "Short URL code",
                        "name": "shortURL",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Show preview page (1=yes, 0=no)",
                        "name": "preview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Redirect to original URL"
                    },
                    "302": {
                        "description": "Redirect to preview page (if preview=1)"
                    },
                    "403": {
                        "description": "Usage limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Short URL not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "410": {
                        "description": "URL has expired",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AdminStats": {
            "type": "object",
            "properties": {
                "activeURLs": {
                    "type": "integer"
                },
                "cacheEnabled": {
                    "type": "boolean"
                },
                "cacheHitRate": {
                    "type": "number"
                },
                "clicksToday": {
                    "type": "integer"
                },
                "expiredURLs": {
                    "type": "integer"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "totalClicks": {
                    "type": "integer"
                },
                "totalURLs": {
                    "type": "integer"
                },
                "urlsCreatedToday": {
                    "type": "integer"
                }
            }
        },
        "handler.IPBlockCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                }
            }
        },
        "handler.ReasonCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "handler.SecurityStats": {
            "type": "object",
            "properties": {
                "botDetectionEnabled": {
                    "type": "boolean"
                },
                "botDetections": {
                    "type": "integer"
                },
                "last24Hours": {
                    "$ref": "#/definitions/handler.StatsLast24Hours"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "maliciousURLsBlocked": {
                    "type": "integer"
                },
                "rateLimitViolations": {
                    "type": "integer"
                },
                "securityEnabled": {
                    "type": "boolean"
                },
                "topBlockReasons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.ReasonCount"
                    }
                },
                "topBlockedIPs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.IPBlockCount"
                    }
                },
                "totalSecurityBlocks": {
                    "type": "integer"
                },
                "urlScanningEnabled": {
                    "type": "boolean"
                }
            }
        },
        "handler.StatsLast24Hours": {
            "type": "object",
            "properties": {
                "botDetections": {
                    "type": "integer"
                },
                "maliciousURLsBlocked": {
                    "type": "integer"
                },
                "rateLimitViolations": {
                    "type": "integer"
                }
            }
        },
        "handler.URLDetailResponse": {
            "type": "object",
            "properties": {
                "accessLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.URLLog"
                    }
                },
                "totalLogs": {
                    "type": "integer"
                },
                "url": {
                    "$ref": "#/definitions/model.URL"
                }
            }
        },
        "handler.URLListItem": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "currentUsage": {
                    "type": "integer"
                },
                "expiry": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isExpired": {
                    "type": "boolean"
                },
                "managementID": {
                    "type": "string"
                },
                "maxUsage": {
                    "type": "integer"
                },
                "originalURL": {
                    "type": "string"
                },
                "shortURL": {
                    "type": "string"
                }
            }
        },
        "handler.URLListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.URLListItem"
                    }
                }
            }
        },
        "model.CacheMetricsResponse": {
            "description": "Cache performance metrics including hit rate and evictions",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "evictions": {
                    "type": "integer",
                    "example": 12
                },
                "hitRatio": {
                    "type": "number",
                    "example": 0.957
                },
                "hits": {
                    "type": "integer",
                    "example": 1234
                },
                "keysAdded": {
                    "type": "integer",
                    "example": 1290
                },
                "misses": {
                    "type": "integer",
                    "example": 56
                }
            }
        },
        "model.CreateRequest": {
            "description": "Request body for creating a new short URL. Expiry time must be in RFC3339 format with timezone (e.g., 2024-12-31T23:59:59+03:30 for Iran time, or use Z for UTC)",
            "type": "object",
            "required": [
                "originalURL"
            ],
            "properties": {
                "customSlug": {
                    "type": "string",
                    "example": "my-link"
                },
                "expiry": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59+03:30"
                },
                "maxUsage": {
                    "type": "integer",
                    "example": 100
                },
                "originalURL": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "model.CreateResponse": {
            "description": "Response after successfully creating a short URL",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00+03:30"
                },
                "expiry": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59+03:30"
                },
                "fullURL": {
                    "type": "string",
                    "example": "http://localhost:8080/abc123xy"
                },
                "managementID": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "maxUsage": {
                    "type": "integer",
                    "example": 100
                },
                "originalURL": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "qrCodeURL": {
                    "type": "string",
                    "example": "http://localhost:8080/qr/abc123xy"
                },
                "shortURL": {
                    "type": "string",
                    "example": "abc123xy"
                }
            }
        },
        "model.DeleteRequest": {
            "description": "Request body for deleting a short URL",
            "type": "object",
            "required": [
                "originalURL",
                "shortURL"
            ],
            "properties": {
                "originalURL": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "shortURL": {
                    "type": "string",
                    "example": "abc123xy"
                }
            }
        },
        "model.ErrorResponse": {
            "description": "Standard error response",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid URL format"
                }
            }
        },
        "model.HealthResponse": {
            "description": "Health check response showing service status",
            "type": "object",
            "properties": {
                "redis": {
                    "type": "string",
                    "example": "connected"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "SecurePassword123"
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.UserResponse"
                }
            }
        },
        "model.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "SecurePassword123"
                }
            }
        },
        "model.SlugConflictResponse": {
            "description": "Response when requested custom slug is already in use",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Custom slug already exists"
                },
                "suggestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SlugSuggestion"
                    }
                }
            }
        },
        "model.SlugSuggestion": {
            "description": "Suggested alternative slug when requested slug is taken",
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean",
                    "example": true
                },
                "slug": {
                    "type": "string",
                    "example": "my-link-2"
                }
            }
        },
        "model.URL": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Manual activation status (for scheduled URLs)",
                    "type": "boolean"
                },
                "aliases": {
                    "description": "Additional short codes pointing to same URL",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "currentUsage": {
                    "type": "integer"
                },
                "customDomain": {
                    "description": "Optional custom domain (e.g., \"go.company.com\")",
                    "type": "string"
                },
                "expiry": {
                    "type": "string"
                },
                "managementID": {
                    "description": "UUID v4 for update/delete operations",
                    "type": "string"
                },
                "maxUsage": {
                    "type": "integer"
                },
                "originalURL": {
                    "type": "string"
                },
                "passwordHash": {
                    "description": "Bcrypt hash for password-protected URLs (empty if not protected)",
                    "type": "string"
                },
                "scheduledEnd": {
                    "description": "URL becomes inactive at this time (zero value = no end)",
                    "type": "string"
                },
                "scheduledStart": {
                    "description": "URL becomes active at this time (zero value = active immediately)",
                    "type": "string"
                },
                "shortURL": {
                    "type": "string"
                },
                "userID": {
                    "description": "Owner user ID (empty for anonymous URLs)",
                    "type": "string"
                }
            }
        },
        "model.URLLog": {
            "type": "object",
            "properties": {
                "accessedAt": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "referer": {
                    "type": "string"
                },
                "shortURL": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                }
            }
        },
        "model.UpdateRequest": {
            "description": "Request body for updating the destination of a short URL",
            "type": "object",
            "required": [
                "newOriginalURL",
                "originalURL",
                "shortURL"
            ],
            "properties": {
                "newOriginalURL": {
                    "type": "string",
                    "example": "https://newexample.com"
                },
                "originalURL": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "shortURL": {
                    "type": "string",
                    "example": "abc123xy"
                }
            }
        },
        "model.UpdateResponse": {
            "description": "Response after successfully updating a short URL",
            "type": "object",
            "properties": {
                "managementID": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "message": {
                    "type": "string",
                    "example": "URL updated successfully"
                },
                "newOriginalURL": {
                    "type": "string",
                    "example": "https://newexample.com"
                },
                "oldOriginalURL": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "shortURL": {
                    "type": "string",
                    "example": "abc123xy"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-15T11:00:00+03:30"
                }
            }
        },
        "model.UserResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "customDomain": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastLoginAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "model.VerifyOTPRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "otp": {
                    "type": "string",
                    "example": "123456"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Admin API key for accessing protected endpoints",
            "type": "apiKey",
            "name": "X-Admin-Key",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Operations for creating, redirecting, and managing short URLs",
            "name": "URLs"
        },
        {
            "description": "Secure operations for updating and deleting short URLs (requires managementID)",
            "name": "Management"
        },
        {
            "description": "Health checks and system metrics",
            "name": "System"
        },
        {
            "description": "Admin dashboard and management endpoints (requires API key authentication)",
            "name": "Admin"
        },
        {
            "description": "User registration, login, and OTP verification",
            "name": "Authentication"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Short URL Generator API",
	Description:      "Production-ready URL shortening service with Redis persistence, caching, rate limiting, and comprehensive management features.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
